{"version":3,"sources":["App.js","../node_modules/express/lib sync","reportWebVitals.js","index.js"],"names":["express","require","bodyParser","awsServerlessExpressMiddleware","AWS","app","use","json","eventContext","req","res","next","header","get","roleArn","config","region","sessionName","query","payloadSub","cognitoIdentity","CognitoIdentity","stsClient","STS","params","IdentityPoolId","Logins","jwtToken","getId","err","data","console","log","stack","getOpenIdToken","openIdToken","stsParams","RoleSessionName","WebIdentityToken","Token","RoleArn","assumeRoleWithWebIdentity","update","credentials","accessKeyId","Credentials","AccessKeyId","secretAccessKey","SecretAccessKey","sessionToken","SessionToken","expiration","Expiration","registerUserParams","AwsAccountId","Email","email","IdentityType","Namespace","UserRole","IamArn","SessionName","QuickSight","registerUser","code","getDashboardEmbedUrl","DashboardId","ResetDisabled","SessionLifetimeInMinutes","UndoRedoDisabled","setTimeout","listen","module","exports","webpackEmptyContext","e","Error","keys","resolve","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1cee11b6.chunk.js","sourcesContent":["var express = require('express')\nvar bodyParser = require('body-parser')\nvar awsServerlessExpressMiddleware = require('aws-serverless-express/middleware')\n\nvar AWS = require('aws-sdk');\nvar AmazonCognitoIdentity = require('amazon-cognito-identity-js');\nconst https = require('https');\n\n// declare a new express app\nvar app = express()\napp.use(bodyParser.json())\napp.use(awsServerlessExpressMiddleware.eventContext())\n\n// Enable CORS for all methods\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\")\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\")\n  next()\n});\n\n/**********************\n * getQuickSightDashboardEmbedURL get method *\n **********************/\n\napp.get('/getQuickSightDashboardEmbedURL', function(req, res) {\n    \n    var roleArn = 'arn:aws:cognito-idp:us-east-1:774446988871:userpool/us-east-1_7kZtychMF'; // your cognito authenticated role arn here\n\n    AWS.config.region = 'us-east-1';\n  \n    var sessionName = req.query.payloadSub;\n    var cognitoIdentity = new AWS.CognitoIdentity();\n    var stsClient = new AWS.STS();\n    var params = {\n        IdentityPoolId: 'us-east-1:4a921582-2034-417e-85f6-b159abe51cd9', // your identity pool id here\n        Logins: {\n            // your logins here\n            'cognito-idp.us-east-1.amazonaws.com/us-east-1_7kZtychMF': req.query.jwtToken\n        }\n    };\n    \n    cognitoIdentity.getId(params, function(err, data) {\n        if (err) console.log(err, err.stack);\n        else {\n            data.Logins = {\n                // your logins here\n                'cognito-idp.us-east-1.amazonaws.com/us-east-1_7kZtychMF': req.query.jwtToken\n            };\n\n            cognitoIdentity.getOpenIdToken(data, function(err, openIdToken) {\n                if (err) {\n                    console.log(err, err.stack);\n                    //callback(err);\n                    res.json({\n                      err\n                    })\n                } else {\n                    let stsParams = {\n                        RoleSessionName: sessionName,\n                        WebIdentityToken: openIdToken.Token,\n                        RoleArn: roleArn\n                    }\n                    stsClient.assumeRoleWithWebIdentity(stsParams, function(err, data) {\n                        if (err) {\n                            console.log(err, err.stack);\n                            //callback(err);\n                            res.json({\n                              err\n                            })\n                        } else {\n                            AWS.config.update({\n                                region: 'us-east-1',\n                                credentials: {\n                                    accessKeyId: data.Credentials.AccessKeyId,\n                                    secretAccessKey: data.Credentials.SecretAccessKey,\n                                    sessionToken: data.Credentials.SessionToken,\n                                    expiration: data.Credentials.Expiration\n                                }\n                            });\n                            var registerUserParams = {\n                                // required\n                                AwsAccountId: \"774446988871\",\n                                // can be passed in from api-gateway call\n                                Email: req.query.email,\n                                // can be passed in from api-gateway call\n                                IdentityType: 'IAM',\n                                // can be passed in from api-gateway call\n                                Namespace: 'default',\n                                // can be passed in from api-gateway call\n                                UserRole: 'READER',\n                                IamArn: roleArn,\n                                SessionName: sessionName\n                            };\n                            var quicksight = new AWS.QuickSight();\n                            quicksight.registerUser(registerUserParams, function(err, data) {\n                                if (err) {\n                                    console.log(\"3\");\n                                    console.log(err, err.stack); // an error occurred\n                                    if (err.code && err.code === 'ResourceExistsException') {\n                                      var getDashboardParams = {\n                                            // required\n                                            AwsAccountId: \"774446988871\",\n                                            // required\n                                            DashboardId: \"c091e8c2-4b7f-4560-9f22-f7c0d32d1c6b\",\n                                            // required\n                                            IdentityType: 'IAM',\n                                            ResetDisabled: false, // can be passed in from api-gateway call\n                                            SessionLifetimeInMinutes: 100, // can be passed in from api-gateway call\n                                            UndoRedoDisabled: false // can be passed in from api-gateway call\n                                        };\n                                        var quicksightGetDashboard = new AWS.QuickSight();\n                                        quicksightGetDashboard.getDashboardEmbedUrl(getDashboardParams, function(err, data) {\n                                            if (err) {\n                                                console.log(err, err.stack); // an error occurred\n                                                  res.json({\n                                                    err\n                                                  })\n                                            } else {\n                                                console.log(data);\n                                                res.json({\n                                                  data\n                                                })\n                                            }\n                                        });\n                                    } else {\n                                      res.json({\n                                        err\n                                      })\n                                    }\n                                } else {\n                                    // successful response\n                                    setTimeout(function() {\n                                    var getDashboardParams = {\n                                          // required\n                                          AwsAccountId: \"774446988871\",\n                                          // required\n                                          DashboardId: \"c091e8c2-4b7f-4560-9f22-f7c0d32d1c6b\",\n                                          // required\n                                          IdentityType: 'IAM',\n                                          ResetDisabled: false, // can be passed in from api-gateway call\n                                          SessionLifetimeInMinutes: 100, // can be passed in from api-gateway call\n                                          UndoRedoDisabled: false // can be passed in from api-gateway call\n                                      };\n                                  \n                                      var quicksightGetDashboard = new AWS.QuickSight();\n                                      quicksightGetDashboard.getDashboardEmbedUrl(getDashboardParams, function(err, data) {\n                                          if (err) {\n                                              console.log(err, err.stack); // an error occurred\n                                                res.json({\n                                                  err\n                                                })\n                                          } else {\n                                              console.log(data);\n                                              res.json({\n                                                data\n                                              })\n                                          }\n                                      });\n                                        \n                                    }, 2000);\n                                    \n                                }\n                            });\n                            \n                        }\n                    });\n                }\n            });\n        }\n    });\n\n});\n\napp.listen(3000, function() {\n    console.log(\"App started\")\n});\n\nmodule.exports = app","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 297;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}